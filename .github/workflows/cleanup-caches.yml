name: 🧹 Cleanup Old Caches

on:
  # 允许手动触发
  workflow_dispatch:
  # 每周日凌晨 3 点定时触发
  schedule:
    - cron: '0 3 * * 0'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    # 明确为这个任务授予删除 Actions 缓存所需的权限
    permissions:
      actions: write

    steps:
      - name: 🗑️ Delete old caches based on inactivity
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // --- 配置 ---
            // 定义缓存的保留期限（天）。超过这个天数未被访问的缓存将被删除。
            const RETENTION_DAYS = 7; 
            // --- 结束配置 ---

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const retentionDate = new Date();
            retentionDate.setDate(retentionDate.getDate() - RETENTION_DAYS);

            console.log(`🧹 准备清理 ${owner}/${repo} 中超过 ${RETENTION_DAYS} 天未使用的缓存...`);
            console.log(` older than ${retentionDate.toISOString()}`);

            // 使用 github.paginate 自动处理所有分页
            const caches = await github.paginate(github.rest.actions.getActionsCacheList, {
              owner: owner,
              repo: repo,
              per_page: 100,
            });

            const cachesToDelete = [];
            
            console.log(`🔎 总共找到 ${caches.length} 个缓存进行检查。`);

            for (const cache of caches) {
              const lastAccessedAt = new Date(cache.last_accessed_at);
              if (lastAccessedAt < retentionDate) {
                console.log(`[DELETE] 缓存 Key: ${cache.key}, 大小: ${(cache.size_in_bytes / 1024 / 1024).toFixed(2)} MB, 上次使用: ${cache.last_accessed_at}`);
                cachesToDelete.push(cache.id);
              } else {
                // 为了日志清晰，可以取消下面这行注释来查看被保留的缓存
                // console.log(`[KEEP] 缓存 Key: ${cache.key}, 上次使用: ${cache.last_accessed_at}`);
              }
            }

            if (cachesToDelete.length === 0) {
              console.log("✅ 无可清理的旧缓存。");
              return;
            }

            console.log(`\n🗑️ 将要删除 ${cachesToDelete.length} 个旧缓存...`);

            let deletedCount = 0;
            for (const cache_id of cachesToDelete) {
              try {
                await github.rest.actions.deleteActionsCacheById({
                  owner: owner,
                  repo: repo,
                  cache_id: cache_id,
                });
                deletedCount++;
              } catch (error) {
                console.error(`删除缓存 ID ${cache_id} 失败: ${error.message}`);
              }
            }
            
            console.log(`\n🎉 清理完成！成功删除了 ${deletedCount} 个缓存。`);

